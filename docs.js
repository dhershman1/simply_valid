module.exports = [{"title":"creditCard","since":"v3.2.0","category":"Combo","syntax":"creditCard(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { creditCard } = require('simply_valid/combo');"},"standard":{"title":"Standard","code":"import { creditCard } from 'simply_valid/combo';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/combo/creditCard/index.js\"></script>"}},"desc":"Validates that the value is some kind of credit card (excludes the visa pan card however)\rit runs validation in strict mode by default","examples":["const result = creditCard('4111111111111111'); // => true\rconst result = creditCard('AB4111111111111111'); // => false"],"params":[{"type":{"names":["String"]},"description":"The credit card number value to validate","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"cvn","since":"v3.2.0","category":"Combo","syntax":"cvn(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { cvn } = require('simply_valid/combo');"},"standard":{"title":"Standard","code":"import { cvn } from 'simply_valid/combo';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/combo/cvn/index.js\"></script>"}},"desc":"Validates that the value is either a normal or amex CVN number","examples":["const result = cvn('333'); // => true\rconst result = cvn('4444'); // => true\rconst result = cvn('55555'); // => false"],"params":[{"type":{"names":["String"]},"description":"The cvn string to run validation against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"simplyValid","since":"v1.0.0","category":"Main","syntax":"simplyValid(options, data)","usage":{"commonjs":{"title":"CommonJs","code":"const simplyValid = require('simply_valid');"},"standard":{"title":"Standard","code":"import simplyValid from 'simply_valid';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/simplyValid/index.js\"></script>"}},"desc":"The main validation functionality of simply valid","examples":["// Simple validation schemas\r\rconst validate = simplyValid({\r\n    schema: 'hasValue'\r\n  });\r\n\r\n  validate('test'); // => { isValid: true }\r\n  validate(''); // => { isValid: false, story: [{ test: 'hasValue', value: '' }] }\r\n  simplyValid({\r\n    schema: 'hasValue'\r\n  }, 'test'); // => { isValid: true }\r\r// Array Validation Schemas\r\rconst validate = simplyValid({\r schema: ['hasValue', 'hasNumber']\r});\rvalidate('test1123'); // => { isValid: true }\rvalidate('test'); // => { isValid: false, story: [{ test: 'hasNumbers', value: 'test' }] }\r\r// Object Validation Schema\r\rconst validate = simplyValid({\r schema: {\r   test: ['hasNumbers', 'hasLetters'],\r   thing: 'hasValue',\r   nestedThing: ['isPositive', 'hasNumbers']\r }\r});\rvalidate({\r  test: 'cool112',\r  thing: 'test',\r  other: {\r    nestedThing: '1234'\r  }\r}); // => { isValid: true }"],"params":[{"type":{"names":["Object"]},"description":"The main options to setup simply_valid","name":"options"},{"type":{"names":["Any"]},"description":"The data that we want to run the validation functionality against","name":"data"}],"returns":[{"type":{"names":["Object"]},"description":"Returns an object with a isValid prop telling if validation was a success, and a story which is an array of objects of which validation methods failed"}],"properties":[{"type":{"names":["Any"]},"description":"The schema that the functionality of the module should be following","name":"schema"},{"type":{"names":["Boolean"]},"description":"Whether or not we should run card validation strictly or not","name":"strictCard"},{"type":{"names":["Number"]},"description":"The max number used for max validation methods","name":"max"},{"type":{"names":["Number"]},"description":"The min number used for min validation methods","name":"min"},{"type":{"names":["RegExp"]},"description":"The RegExp pattern for vin validation","name":"vinPattern"},{"type":{"names":["RegExp"]},"description":"The RegExp pattern for email validation","name":"emailPattern"},{"type":{"names":["RegExp"]},"description":"The RegExp pattern for password validation","name":"passwordPattern"}]},{"title":"date","since":"v3.2.0","category":"Combo","syntax":"date(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { date } = require('simply_valid/combo');"},"standard":{"title":"Standard","code":"import { date } from 'simply_valid/combo';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/combo/date/index.js\"></script>"}},"desc":"Validates that the value is some kind of date (short, proper, or normal)","examples":["const result = date('01/19'); // => true\rconst result = date('01/15/2019'); // => true\rconst result = date('2019/01/05'); // => true"],"params":[{"type":{"names":["String"]},"description":"The date string value to validate","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"hasLetters","since":"v1.0.0","category":"Has","syntax":"hasLetters(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { hasLetters } = require('simply_valid/has');"},"standard":{"title":"Standard","code":"import { hasLetters } from 'simply_valid/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/has/hasLetters/index.js\"></script>"}},"desc":"Validates if the value contains numbers or not","examples":["const result = hasLetters('11'); // => false\nconst result = hasLetters('eew2211'); // => true\nconst result = hasLetters('eerrt'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"hasNumbers","since":"v1.0.0","category":"Has","syntax":"hasNumbers(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { hasNumbers } = require('simply_valid/has');"},"standard":{"title":"Standard","code":"import { hasNumbers } from 'simply_valid/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/has/hasNumbers/index.js\"></script>"}},"desc":"Validates if the value contains numbers or not","examples":["const result = hasNumbers('11'); // => true\nconst result = hasNumbers('eew2211'); // => true\nconst result = hasNumbers('eerrt'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"hasNumbersOrSpecials","since":"v1.0.0","category":"Has","syntax":"hasNumbersOrSpecials(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { hasNumbersOrSpecials } = require('simply_valid/has');"},"standard":{"title":"Standard","code":"import { hasNumbersOrSpecials } from 'simply_valid/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/has/hasNumbersOrSpecials/index.js\"></script>"}},"desc":"Validates if the value contains Special Characters or numbers","examples":["const result = hasNumbersOrSpecials('11%%$#'); // => true\nconst result = hasNumbersOrSpecials('eew2211!@'); // => true\nconst result = hasNumbersOrSpecials('eerrt'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"hasSpecialCharacters","since":"v1.0.0","category":"Has","syntax":"hasSpecialCharacters(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { hasSpecialCharacters } = require('simply_valid/has');"},"standard":{"title":"Standard","code":"import { hasSpecialCharacters } from 'simply_valid/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/has/hasSpecialCharacters/index.js\"></script>"}},"desc":"Validates if the value contains Special Characters","examples":["const result = hasSpecialCharacters('11%%$#'); // => true\nconst result = hasSpecialCharacters('eew2211!@'); // => true\nconst result = hasSpecialCharacters('eerrt'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"hasUpperAndLowerCase","since":"v1.0.0","category":"Has","syntax":"hasUpperAndLowerCase(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { hasUpperAndLowerCase } = require('simply_valid/has');"},"standard":{"title":"Standard","code":"import { hasUpperAndLowerCase } from 'simply_valid/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/has/hasUpperAndLowerCase/index.js\"></script>"}},"desc":"Validates if the value contains Special Characters or numbers","examples":["const result = hasUpperAndLowerCase('11%%$#'); // => false\nconst result = hasUpperAndLowerCase('Eew2211!@'); // => true\nconst result = hasUpperAndLowerCase('eERrt'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"hasValue","since":"v1.0.0","category":"Has","syntax":"hasValue(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { hasValue } = require('simply_valid/has');"},"standard":{"title":"Standard","code":"import { hasValue } from 'simply_valid/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/has/hasValue/index.js\"></script>"}},"desc":"Validates if the value is actually a value","examples":["const result = hasValue('11'); // => true\nconst result = hasValue(''); // => false"],"params":[{"type":{"names":["Any"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isAboveMin","since":"v1.0.0","category":"Is","syntax":"isAboveMin(m, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isAboveMin } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isAboveMin } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isAboveMin/index.js\"></script>"}},"desc":"Validates if a provided value is a below the set minimum","examples":["const above = isAboveMin(15);\nconst result = above('19'); // => true\n\n// OR\n\nconst result = isAboveMin(15, '19'); // => true\nconst result = isAboveMin(15)('19'); // => true"],"params":[{"type":{"names":["Number"]},"description":"The min to validate against","name":"m"},{"type":{"names":["String"]},"description":"The value to validate with","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isAmericanExpressCard","since":"v1.0.0","category":"Is","syntax":"isAmericanExpressCard(strict, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isAmericanExpressCard } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isAmericanExpressCard } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isAmericanExpressCard/index.js\"></script>"}},"desc":"Validates if a provided value is a valid American Express card (depricated)","examples":["const isAmex = isAmericanExpressCard(true);\nconst result = isAmex('341111111111111'); // => false\n\n// OR\n\nconst result = isAmericanExpressCard(true, '341111111111111'); // => false\nconst result = isAmericanExpressCard(true)('341111111111111'); // => false\nconst result = isAmericanExpressCard(false, '341111111111111'); // => true\n// Since the provided number is a fake the luhn algorithm will fail it"],"params":[{"type":{"names":["Boolean"]},"description":"Determines if the card should be strictly validated","name":"strict"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isAmexCard","since":"v3.2.0","category":"Is","syntax":"isAmexCard(strict, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isAmexCard } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isAmexCard } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isAmexCard/index.js\"></script>"}},"desc":"Validates if a provided value is a valid American Express card","examples":["const amex = isAmexCard(true);\nconst result = amex('341111111111111'); // => false\n\n// OR\n\nconst result = isMasterCard(true, '341111111111111'); // => false\nconst result = isMasterCard(true)('341111111111111'); // => false\nconst result = isMasterCard(false)('341111111111111'); // => true\n// Since the provided number is a fake the luhn algorithm will fail it"],"params":[{"type":{"names":["Boolean"]},"description":"Determines if the card should be strictly validated","name":"strict"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isBelowMax","since":"v1.0.0","category":"Is","syntax":"isBelowMax(m, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isBelowMax } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isBelowMax } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isBelowMax/index.js\"></script>"}},"desc":"Validates if a provided value is a below the set maximum","examples":["const below = isBelowMax(20);\nconst result = below('19'); // => true\n\n// OR\n\nconst result = isBelowMax(20, '19'); // => true\nconst result = isBelowMax(20)('19'); // => true"],"params":[{"type":{"names":["Number"]},"description":"The max to validate against","name":"m"},{"type":{"names":["String"]},"description":"The value to validate with","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isCAPostalCode","since":"v1.0.0","category":"Is","syntax":"isCAPostalCode(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isCAPostalCode } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isCAPostalCode } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isCAPostalCode/index.js\"></script>"}},"desc":"Validates if a provided value is a valid CA postal Code","examples":["const result = isCAPostalCode('K1A0B1'); // => true\nconst result = isCAPostalCode('44444'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isDate","since":"v1.0.0","category":"Is","syntax":"isDate(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isDate } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isDate } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isDate/index.js\"></script>"}},"desc":"Validates if a normal date is valid or not","examples":["const result = isDate('1/2/2019'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isDateProper","since":"v1.0.0","category":"Is","syntax":"isDateProper(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isDateProper } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isDateProper } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isDateProper/index.js\"></script>"}},"desc":"Validates if a \"Proper\" date is valid or not","examples":["const result = isDateProper('2019/1/2'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isDateShort","since":"v1.0.0","category":"Is","syntax":"isDateShort(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isDateShort } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isDateShort } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isDateShort/index.js\"></script>"}},"desc":"Validates if a short date is valid or not","examples":["const result = isDateShort('1/19'); // => true\nconst result = isDateShort('13/19'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isDiscoverCard","since":"v1.0.0","category":"Is","syntax":"isDiscoverCard(strict, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isDiscoverCard } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isDiscoverCard } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isDiscoverCard/index.js\"></script>"}},"desc":"Validates if a provided value is a valid American Express card","examples":["const discover = isDiscoverCard(true);\nconst result = discover('6111111111111111'); // => false\n\n// OR\n\nconst result = isDiscoverCard(true, '6111111111111111'); // => false\nconst result = isDiscoverCard(true)('6111111111111111'); // => false\nconst result = isDiscoverCard(false, '6111111111111111'); // => true\n// Since the provided number is a fake the luhn algorithm will fail it"],"params":[{"type":{"names":["Boolean"]},"description":"Determines if the card should be strictly validated","name":"strict"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isEmail","since":"v1.0.0","category":"Is","syntax":"isEmail(email, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isEmail } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isEmail } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isEmail/index.js\"></script>"}},"desc":"Validates if a email is valid or not using the email regex","examples":["const email = isEmail('default');\nconst result = email('dusty@gmail.com'); // => true\n\n// OR\n\nconst result = isEmail('default', 'dusty@gmail.com'); // => true\nconst result = isEmail('default')('dusty@gmail.com'); // => true"],"params":[{"type":{"names":["RegExp","String"]},"description":"Accepts a RegexExp or the 'default' string to use the default regex","name":"email"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isLicensePlate","since":"v1.0.0","category":"Is","syntax":"isLicensePlate(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isLicensePlate } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isLicensePlate } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isLicensePlate/index.js\"></script>"}},"desc":"Validates if a provided value is a valid Phone number","examples":["const result = isLicensePlate('SSS1829'); // => true\nconst result = isLicensePlate('SSS-1829'); // => true\nconst result = isLicensePlate('SSSS 188'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isMasterCard","since":"v1.0.0","category":"Is","syntax":"isMasterCard(strict, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isMasterCard } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isMasterCard } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isMasterCard/index.js\"></script>"}},"desc":"Validates if a provided value is a valid Master card","examples":["const master = isMasterCard(true);\nconst result = master('5511111111111111'); // => false\n\n// OR\n\nconst result = isMasterCard(true, '5511111111111111'); // => false\nconst result = isMasterCard(true)('5511111111111111'); // => false\n// Since the provided number is a fake the luhn algorithm will fail it"],"params":[{"type":{"names":["Boolean"]},"description":"Determines if the card should be strictly validated","name":"strict"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isNegative","since":"v1.0.0","category":"Is","syntax":"isNegative(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isNegative } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isNegative } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isNegative/index.js\"></script>"}},"desc":"Validates if a provided value is a negative number","examples":["const result = isNegative('-2'); // => true\nconst result = isNegative(-2); // => true\nconst result = isNegative(2); // => false"],"params":[{"type":{"names":["String","Number"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isNumber","since":"v1.0.0","category":"Is","syntax":"isNumber(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isNumber } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isNumber } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isNumber/index.js\"></script>"}},"desc":"Validates if a provided value is a valid number or not","examples":["const result = isNumber('2'); // => true\nconst result = isNumber(2); // => true"],"params":[{"type":{"names":["String","Number"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isPhone","since":"v1.0.0","category":"Is","syntax":"isPhone(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isPhone } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isPhone } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isPhone/index.js\"></script>"}},"desc":"Validates if a provided value is a valid Phone number","examples":["const result = isPhone('555-666-7777'); // => true\nconst result = isPhone('5556667777'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isPositive","since":"v1.0.0","category":"Is","syntax":"isPositive(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isPositive } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isPositive } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isPositive/index.js\"></script>"}},"desc":"Validates if a provided value is a positive number","examples":["const result = isPositive('2'); // => true\nconst result = isPositive(2); // => true\nconst result = isPositive(-2); // => false"],"params":[{"type":{"names":["String","Number"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isVin","since":"v1.0.0","category":"Is","syntax":"isVin(vin, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isVin } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isVin } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isVin/index.js\"></script>"}},"desc":"Validates if a provided value is a valid vin number","examples":["const vin = isVin('default');\nconst result = vin('JM1CW2BL8C0127808'); // => true\n\n// OR\n\nconst result = isVin('default', 'JM1CW2BL8C0127808'); // => true\nconst result = isVin('default')('JM1CW2BL8C0127808'); // => true"],"params":[{"type":{"names":["RegExp","String"]},"description":"Accepts a RegexExp or the 'default' string to use the default regex","name":"vin"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isVisaCard","since":"v1.0.0","category":"Is","syntax":"isVisaCard(strict, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isVisaCard } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isVisaCard } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isVisaCard/index.js\"></script>"}},"desc":"Validates if a provided value is a valid Visa credit card","examples":["const isVida = isVisaCard(true);\nconst result = isVisa('4111111111111111'); // => true\n\n// OR\n\nconst result = isVisaCard(true, '4111111111111111'); // => true\nconst result = isVisaCard(true)('4111111111111111'); // => true"],"params":[{"type":{"names":["Boolean"]},"description":"Determines if the card should be strictly validated","name":"strict"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isVisaPanCard","since":"v1.0.0","category":"Is","syntax":"isVisaPanCard(strict, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isVisaPanCard } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isVisaPanCard } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isVisaPanCard/index.js\"></script>"}},"desc":"Validates if a provided value is a valid Visa Pan credit card","examples":["const visaPan = isVisaPanCard(true);\nconst result = visaPan('4111111111111111222'); // => false\n\n// OR\n\nconst result = isVisaPanCard(true, '4111111111111111222'); // => false\nconst result = isVisaPanCard(true)('4111111111111111222'); // => false\nconst result = isVisaPanCard(false)('4111111111111111222'); // => true\n// Since the provided number is a fake the luhn algorithm will fail it"],"params":[{"type":{"names":["Boolean"]},"description":"Determines if the card should be strictly validated","name":"strict"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"isZip","since":"v1.0.0","category":"Is","syntax":"isZip(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { isZip } = require('simply_valid/is');"},"standard":{"title":"Standard","code":"import { isZip } from 'simply_valid/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/is/isZip/index.js\"></script>"}},"desc":"Validates if a provided value is a correct American zip code","examples":["const result = isZip('44444'); // => true\nconst result = isZip('232'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"meetsCVN","since":"v1.0.0","category":"Meets","syntax":"meetsCVN(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { meetsCVN } = require('simply_valid/meets');"},"standard":{"title":"Standard","code":"import { meetsCVN } from 'simply_valid/meets';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/meets/meetsCVN/index.js\"></script>"}},"desc":"Validates if the value is a valid CVN code","examples":["const result = meetsCVN('201'); // => true\nconst result = meetsCVN('1777'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"meetsCVNAmex","since":"v1.0.0","category":"Meets","syntax":"meetsCVNAmex(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { meetsCVNAmex } = require('simply_valid/meets');"},"standard":{"title":"Standard","code":"import { meetsCVNAmex } from 'simply_valid/meets';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/meets/meetsCVNAmex/index.js\"></script>"}},"desc":"Validates if the value is a valid Amex CVN code","examples":["const result = meetsCVNAmex('201'); // => false\nconst result = meetsCVNAmex('1777'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"meetsMinMax","since":"v1.0.0","category":"Meets","syntax":"meetsMinMax($0.min, $0.max, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { meetsMinMax } = require('simply_valid/meets');"},"standard":{"title":"Standard","code":"import { meetsMinMax } from 'simply_valid/meets';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/meets/meetsMinMax/index.js\"></script>"}},"desc":"Validates if the value contains numbers or not","examples":["const minMax = meetsMinMax({\n  min: 0,\n  max: 10\n});\nconst result = minMax(5); // => true\n\n// OR\n\nconst result = meetsMinMax('11'); // => false\nconst result = meetsMinMax('eew2211'); // => true\nconst result = meetsMinMax('eerrt'); // => true"],"params":[{"type":{"names":["Number"]},"description":"The min value to compare to","name":"$0.min"},{"type":{"names":["Number"]},"description":"The min value to compare to","name":"$0.max"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"meetsPassReq","since":"v1.0.0","category":"Meets","syntax":"meetsPassReq(pass, val)","usage":{"commonjs":{"title":"CommonJs","code":"const { meetsPassReq } = require('simply_valid/meets');"},"standard":{"title":"Standard","code":"import { meetsPassReq } from 'simply_valid/meets';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/meets/meetsPassReq/index.js\"></script>"}},"desc":"Validates if the value is a valid treaddepth style","examples":["const pass = meetsPassReq('default');\nconst result = pass('cOol12$d'); // => true\n\n// OR\n\nconst result = meetsPassReq('default', 'cOol12$d'); // => true\nconst result = meetsPassReq('default')('cOol12$d') // => true\nconst result = meetsPassReq('default', 'AA'); // => false"],"params":[{"type":{"names":["RegExp","String"]},"description":"Accepts a RegexExp or the 'default' string to use the default regex","name":"pass"},{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"meetsTreadDepth","since":"v1.0.0","category":"Meets","syntax":"meetsTreadDepth(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { meetsTreadDepth } = require('simply_valid/meets');"},"standard":{"title":"Standard","code":"import { meetsTreadDepth } from 'simply_valid/meets';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/meets/meetsTreadDepth/index.js\"></script>"}},"desc":"Validates if the value is a valid treaddepth style","examples":["const result = meetsTreadDepth('12'); // => true\nconst result = meetsTreadDepth('AA'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"meetsYearStandard","since":"v1.0.0","category":"Meets","syntax":"meetsYearStandard(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { meetsYearStandard } = require('simply_valid/meets');"},"standard":{"title":"Standard","code":"import { meetsYearStandard } from 'simply_valid/meets';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/meets/meetsYearStandard/index.js\"></script>"}},"desc":"Validates if the value is a valid year string","examples":["const result = meetsYearStandard('2017'); // => true\nconst result = meetsYearStandard('17'); // => true\nconst result = meetsYearStandard('178'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"noLetters","since":"v1.0.0","category":"No","syntax":"noLetters(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { noLetters } = require('simply_valid/no');"},"standard":{"title":"Standard","code":"import { noLetters } from 'simply_valid/no';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/no/noLetters/index.js\"></script>"}},"desc":"Validates if the value has no Letters","examples":["const result = noLetters('1122334') // => true\nconst result = noLetters('AAAA'); // => false\nconst result = noLetters('AAA12!#$'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"noNumbers","since":"v1.0.0","category":"No","syntax":"noNumbers(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { noNumbers } = require('simply_valid/no');"},"standard":{"title":"Standard","code":"import { noNumbers } from 'simply_valid/no';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/no/noNumbers/index.js\"></script>"}},"desc":"Validates if the value has no numbers","examples":["const result = noNumbers('AAAA'); // => true\nconst result = noNumbers('1122334') // => false\nconst result = noNumbers('AAA12!#$'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"noSpecials","since":"v1.0.0","category":"No","syntax":"noSpecials(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { noSpecials } = require('simply_valid/no');"},"standard":{"title":"Standard","code":"import { noSpecials } from 'simply_valid/no';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/no/noSpecials/index.js\"></script>"}},"desc":"Validates if the value has no special characters","examples":["const result = noSpecials('AAAA'); // => true\nconst result = noSpecials('1122334') // => true\nconst result = noSpecials('AAA12!#$'); // => false"],"params":[{"type":{"names":["String"]},"description":"The value to validate against","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]},{"title":"zipOrPostal","since":"v3.2.0","category":"Combo","syntax":"zipOrPostal(val)","usage":{"commonjs":{"title":"CommonJs","code":"const { zipOrPostal } = require('simply_valid/combo');"},"standard":{"title":"Standard","code":"import { zipOrPostal } from 'simply_valid/combo';"},"browser":{"title":"Browser","code":"<script src=\"path/to/simply_valid/combo/zipOrPostal/index.js\"></script>"}},"desc":"Validates that the value is some kind of zip or postal code","examples":["const result = zipOrPostal('55555'); // => true\rconst result = zipOrPostal('K1A0B1'); // => true"],"params":[{"type":{"names":["String"]},"description":"The zip or postal code string to validate","name":"val"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true or false based on the validation test"}]}]